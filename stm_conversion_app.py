{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "83f8a3e8-5205-4138-ab6c-c301e1926b45",
   "metadata": {},
   "outputs": [],
   "source": [
    "# streamlit\n",
    "import streamlit as st\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "826b9e91-f883-43a3-a508-3932e767fef8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-17 20:22:20.790 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-17 20:22:21.095 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\bhuva\\AppData\\Roaming\\Python\\Python311\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-04-17 20:22:21.097 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-17 20:22:21.098 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-17 20:22:21.099 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-17 20:22:21.099 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-17 20:22:21.101 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-04-17 20:22:21.102 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "# Sample classifier function\n",
    "def train_classification_model(df):\n",
    "    df = preprocess_data(df)  # assume you have this function defined\n",
    "\n",
    "    X = df.drop(columns=['order'])\n",
    "    y = df['order']\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "    model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')\n",
    "    model.fit(X_train, y_train)\n",
    "\n",
    "    y_pred = model.predict(X_test)\n",
    "\n",
    "    metrics = {\n",
    "        'Accuracy': accuracy_score(y_test, y_pred),\n",
    "        'Precision': precision_score(y_test, y_pred, average='weighted', zero_division=0),\n",
    "        'Recall': recall_score(y_test, y_pred, average='weighted', zero_division=0),\n",
    "        'F1 Score': f1_score(y_test, y_pred, average='weighted', zero_division=0),\n",
    "    }\n",
    "\n",
    "    return model, metrics, X_train, X_test\n",
    "\n",
    "# Streamlit UI\n",
    "st.title(\"üõí Customer Conversion Analysis using Clickstream Data\")\n",
    "\n",
    "uploaded_file = st.file_uploader(\"Upload your CSV file\", type=[\"csv\"])\n",
    "\n",
    "if uploaded_file:\n",
    "    df1 = pd.read_csv(uploaded_file)\n",
    "    st.success(\"File Uploaded Successfully!\")\n",
    "\n",
    "    # Correlation heatmap\n",
    "    with st.expander(\"üìå Correlation Heatmap\"):\n",
    "        st.markdown(\"This shows relationships between numerical features.\")\n",
    "        corr = df1.select_dtypes(include='number').corr()\n",
    "        fig, ax = plt.subplots(figsize=(10, 6))\n",
    "        sns.heatmap(corr, annot=True, cmap='coolwarm', ax=ax)\n",
    "        st.pyplot(fig)\n",
    "\n",
    "    # Feature distribution\n",
    "    with st.expander(\"üìä Feature Distributions\"):\n",
    "        num_cols = df1.select_dtypes(include='number').columns\n",
    "        selected_feat = st.selectbox(\"Select Feature to Visualize\", num_cols)\n",
    "        fig = px.histogram(df1, x=selected_feat, nbins=30, title=f\"Distribution of {selected_feat}\")\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "    option = st.selectbox(\"Choose a Task\", [\"Classification\", \"Regression\", \"Clustering\"])\n",
    "\n",
    "    if option == \"Classification\":\n",
    "        model, metrics, X_train, X_test = train_classification_model(df1)\n",
    "\n",
    "        # Feature importance\n",
    "        importances = model.feature_importances_\n",
    "        feature_names = X_train.columns\n",
    "        feat_df = pd.DataFrame({\"Feature\": feature_names, \"Importance\": importances}).sort_values(by=\"Importance\", ascending=False)\n",
    "\n",
    "        # SHAP analysis\n",
    "        explainer = shap.Explainer(model)\n",
    "        shap_values = explainer(X_test)\n",
    "\n",
    "        st.subheader(\"üß† SHAP Summary Plot\")\n",
    "        shap.summary_plot(shap_values, X_test, plot_type=\"bar\", show=False)\n",
    "        st.pyplot(bbox_inches='tight')\n",
    "\n",
    "        st.subheader(\"üîç Feature Importance\")\n",
    "        st.bar_chart(feat_df.set_index(\"Feature\"))\n",
    "\n",
    "        st.subheader(\"üìà Classification Results\")\n",
    "        for k, v in metrics.items():\n",
    "            st.write(f\"{k}: {v:.2f}\")\n",
    "\n",
    "    elif option == \"Regression\":\n",
    "        model, metrics = train_regression_model(df1)  # define this function\n",
    "        st.subheader(\"üìâ Regression Results\")\n",
    "        for k, v in metrics.items():\n",
    "            st.write(f\"{k}: {v:.2f}\")\n",
    "\n",
    "    elif option == \"Clustering\":\n",
    "        clustered_df, metrics = train_clustering_model(df1)  # define this function\n",
    "        st.subheader(\"üìä Clustering Results\")\n",
    "        st.write(clustered_df.head())\n",
    "        for k, v in metrics.items():\n",
    "            st.write(f\"{k}: {v:.2f}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "py311",
   "language": "python",
   "name": "py311"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
